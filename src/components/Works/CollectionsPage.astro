---
import Layout from "../../layouts/Layout.astro";
import PaintingItem from "../Works/PaintingItem.astro";
import Image from "astro/components/Image.astro";
import Compartimientos from "../../assets/Azul_Prusia/Compartimientos.jpg";
import { type Painting } from "../../../types/index";

type Props = {
  title: string;
  paintingsList: Painting[];
  description: string;
};

const { title, paintingsList, description } = Astro.props;
---

<Layout title={title}>
  <div class="px-4">
    <div class="flex flex-col items-center">
      <h1 class="text-3xl font-semibold text-center">{title}</h1>
      <p class="md:text-lg text-center py-4 mb-6 md:w-3/4">{description}</p>
    </div>

    <!-- Grid layout for paintings -->
    <div class="columns-1 md:columns-2 lg:columns-3 gap-4 space-y-4">
      {
        paintingsList.map((painting: Painting) => (
          <PaintingItem item={painting} />
        ))
      }
    </div>
  </div>

  <script>
    const toggleItems = document.querySelectorAll(".toggle");
    const modal = document.getElementById("modal");
    const closeModal = document.getElementById("close-modal");
    const modalImg = document.getElementById("modal-img");
    const modalName = document.getElementById("modal-name");
    const modalYear = document.getElementById("modal-year");

    const mobileBreakpoint = 425;

    // Function to check if the screen is larger than mobileBreakpoint
    function isDesktop(): boolean {
      return window.innerWidth > mobileBreakpoint;
    }

    // Open modal and set correct image when clicking the image
    toggleItems.forEach((item) => {
      if (isDesktop()) {
        return;
      }

      item.addEventListener("click", () => {
        const imageUrl = item.getAttribute("data-url");
        const imageAlt = item.getAttribute("data-name");
        const imageYear = item.getAttribute("data-year");

        // Ensure all necessary attributes are present
        if (imageUrl && imageAlt && modalImg && modalName && modalYear) {
          // Set the modal image src and alt dynamically
          modalImg.setAttribute("src", imageUrl);
          modalImg.setAttribute("alt", imageAlt);

          // Update modal content
          modalName.textContent = imageAlt;
          modalYear.textContent = imageYear;

          // Show the modal
          modal?.classList.remove("hidden");
          document.body.style.overflow = "hidden"; // Disable background scrolling
        } else {
          console.error("Image URL, name, or year is missing.");
        }
      });
    });

    // Close modal when clicking the close button
    closeModal?.addEventListener("click", () => {
      modal?.classList.add("hidden");
      document.body.style.overflow = "auto"; // Re-enable background scrolling
    });

    // Optionally close modal when clicking outside the image
    modal?.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.classList.add("hidden");
        document.body.style.overflow = "auto"; // Re-enable background scrolling
      }
    });

    // Close modal with the Esc key
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && !modal?.classList.contains("hidden")) {
        modal?.classList.add("hidden");
        document.body.style.overflow = "auto"; // Re-enable background scrolling
      }
    });
  </script>
</Layout>
